{"version":3,"sources":["icons.js","footer.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","name","className","size","Footer","href","target","rel","Provider","value","color","itemArray","Array","fill","App","useState","isCross","setIscross","winMessage","setWinMessage","changeState","itemNumber","toast","type","Container","transition","Slide","position","Row","Col","md","map","item","index","Card","onClick","CardBody","Button","block","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02eadaa2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FcMinus, FcCancel, FcApproval } from \"react-icons/fc\";\r\n\r\nconst Icon = ({ name }) => {\r\n  switch (name) {\r\n    case \"circle\":\r\n      return <FcApproval className=\"icons\" size={50} />;\r\n    case \"cross\":\r\n      return <FcCancel className=\"icons\" size={50} />;\r\n    default:\r\n      return <FcMinus className=\"icons\" size={50} />;\r\n  }\r\n};\r\n\r\nexport default Icon;","import react from \"react\"\r\nimport {IconContext} from \"react-icons\";\r\nimport { DiGithubBadge } from \"react-icons/di\";\r\n\r\nconst Footer = () => {\r\n    return(\r\n        <a href=\"https://github.com/arjun-tarakesh\" target=\"_blank\" rel=\"noreferrer\">\r\n           <IconContext.Provider value={{ color: 'white', size: '50px' }} >\r\n                <DiGithubBadge className=\"git\" size={50}  />\r\n            </IconContext.Provider>\r\n        </a>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React , { useState } from 'react'\nimport Icon from \"./icons\"\nimport Footer from \"./footer\"\nimport { ToastContainer, toast } from \"react-toastify\";\nimport { Slide } from 'react-toastify';\nimport \"react-toastify/dist/ReactToastify.css\";\n\nimport { Card, CardBody, Container, Button, Col, Row } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport './App.css';\n\nconst itemArray = new Array(9).fill(\"empty\");\n//algorithm-wise states initial state = empty\n\nconst App = () => {\n\n        const [isCross, setIscross] = useState(false);\n        //one state needs to be verified it's enough usestate is initially false\n        const [winMessage, setWinMessage] = useState(\"\");\n        //same first argument is the func and second is what is to be done with it \n\n        //simple function to reload the game and start over again both func set to zero \n        const reloadGame = () => {\n          setIscross(false);\n          setWinMessage(\"\");\n          itemArray.fill(\"empty\",0,9);\n        }\n\n        //to check winner, using the winning ttt logic\n        const checkIsWinner = () => {\n          if (\n            itemArray[0] === itemArray[1] &&\n            itemArray[1] === itemArray[2] &&\n            itemArray[0] !== \"empty\"\n          ) {\n            setWinMessage(`${itemArray[0]} won`);\n            toast(\"👌 Nice one!!\", { type: \"default\" });\n          } else if (\n            itemArray[3] !== \"empty\" &&\n            itemArray[3] === itemArray[4] &&\n            itemArray[4] === itemArray[5]\n          ) {\n            setWinMessage(`${itemArray[3]} won`);\n            toast(\"❄ Cool! \", { type: \"default\" })\n          } else if (\n            itemArray[6] !== \"empty\" &&\n            itemArray[6] === itemArray[7] &&\n            itemArray[7] === itemArray[8]\n          ) {\n            setWinMessage(`${itemArray[6]} won`);\n            toast(\"⚡ Amazing!\", { type: \"default\" })\n          } else if (\n            itemArray[0] !== \"empty\" &&\n            itemArray[0] === itemArray[3] &&\n            itemArray[3] === itemArray[6]\n          ) {\n            setWinMessage(`${itemArray[0]} won`);\n            toast(\"whoa! that was cool! 🌟\", { type: \"dark\" })\n          } else if (\n            itemArray[1] !== \"empty\" &&\n            itemArray[1] === itemArray[4] &&\n            itemArray[4] === itemArray[7]\n          ) {\n            setWinMessage(`${itemArray[1]} won`);\n            toast(\"phew! close one tho! 💫 \", { type: \"dark\" })\n          } else if (\n            itemArray[2] !== \"empty\" &&\n            itemArray[2] === itemArray[5] &&\n            itemArray[5] === itemArray[8]\n          ) {\n            setWinMessage(`${itemArray[2]} won`);\n            toast(\"Yaaasss!! 🏆\", { type: \"dark\" })\n          } else if (\n            itemArray[0] !== \"empty\" &&\n            itemArray[0] === itemArray[4] &&\n            itemArray[4] === itemArray[8]\n          ) {\n            setWinMessage(`${itemArray[0]} won`);\n            toast(\"beautiful 💁 \", { type: \"dark\" })\n          } else if (\n            itemArray[2] !== \"empty\" &&\n            itemArray[2] === itemArray[4] &&\n            itemArray[4] === itemArray[6]\n          ) {\n            setWinMessage(`${itemArray[2]} won`);\n            toast(\"Sweet!! 🍫\", { type: \"dark\" })\n          }\n        }\n\n        const changeState = itemNumber => {\n          if (winMessage) {\n            return toast(\"🍻 \"+winMessage, { type: \"success\" });\n          }\n\n          if (itemArray[itemNumber] === \"empty\") {\n            itemArray[itemNumber] = isCross? \"cross\" : \"circle\" //if cross cross and so\n            setIscross(!isCross) //because iscross is initally false (state)\n            \n          } else {\n            return toast(\"🤺 Already Filled\", {type:\"info\"})\n          }\n          checkIsWinner();\n        }\n\n\n\n\n\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1 className=\"title\">TIC TAC TOE</h1>\n          </header>\n          <Container className=\"p-3\"> \n          {/* reactstrap stuff */}\n                <ToastContainer transition={Slide} position=\"top-right\" />\n                <Row>\n                  <Col md={6} className=\"offset-md-3\">\n                    {winMessage ? (\n                      <div className=\"mb-5 mt-0\">\n                        <h1 className=\"text-success text-uppercase text-center win\">\n                          🍻{winMessage}\n                        </h1>\n                        \n                      </div>\n                    ) : (\n                      <h1 className=\"text-center turns\">\n                        👁️‍🗨️{isCross ? \"Cross\"+\"'s\" : \"Circle\"+\"'s\"} turn\n                      </h1>\n                    )}\n                    <div className=\"grid\">\n                      {itemArray.map((item, index) => (\n                        <Card onClick={ () => changeState(index)} >\n                          <CardBody className=\"box\">\n                            \n                              <Icon name={item} />\n                            \n                          </CardBody>\n                        </Card>\n                      ))}\n                      \n                        \n                    </div>\n                    <Button color=\"success mb-4 mt-3 \" size=\"lg\" block onClick={reloadGame}>\n                          Reload the game\n                    </Button>\n                  </Col>\n                </Row>\n        </Container>\n          <footer>\n            <Footer />\n          </footer>\n        </div>\n        \n      );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}